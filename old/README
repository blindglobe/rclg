This is an initial version of a R-to-Common-Lisp Gateway (RCLG).
Copyright rif 2003, 2004.
The code is not released.

Dependencies: uffi and common-idioms

Although the system is written mostly on top of UFFI, there're a few
calls to CMUCL's alien interface, so it should only work on CMUCL.
(The last time I checked, it also worked unchanged on SBCL).  (It's
impossible to obtain elements of nested structures efficiently on
CMUCL using UFFI --- you get enormous slowness and consing.)

The RCLG system (rclg.asd) automatically starts R when loaded.  If
your R_HOME environment variable is not set, your CL will crash.  I
run CL in slime, and put

(setenv "R_HOME" "/usr/local/lib/R")

in my .emacs.  A similar incantation should work depending on where R
is installed.  

Note: The current rclg-load.lisp has an explicit path to libR.so.  You
should probably check to make sure this path is right.

Note: R generates "invalid" floating point instructions.  Therefore,
we need to remove :invalid from floating-point-modes before starting
R.  This is done automatically at startup time.  Unfortunately, for
reasons that are not clear to me, this doesn't work under SLIME unless
SLIME is run with the :fd-handler communication style.

Once you have it up and running, the basic command to use is r.

For example, 

CL-USER> (r seq 1 5)
#(1 2 3 4 5)
NIL
CL-USER> (r rnorm 4)
#(-0.8058522483571727d0 -0.5010746712745403d0 0.30730975077719486d0
  -0.7376820201686767d0)
NIL

Some efforts towards efficiency have been made.  The
array-element-types of the results are correct:


Note that the second value returned is the "names" associated with the
R object.

There is also a package :rclg-util, which is designed to aid in
defining calls to R with lots of default options.  Compare the outputs of
(r plot (r seq 1 5))
and
(r-plot (r seq 1 5))

I'm not sure why def-r-call is a macro-defining-macro rather than a
function defining macro.

Any suggestions for improvements or workarounds to all the kludges are
appreciated.
