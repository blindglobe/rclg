Slowness at the R level:

  Consed    |   Calls   |    Secs   | Sec/Call  | Bytes/C.  | Name:
-----------------------------------------------------------------------
  1,244,944 |        18 |     0.020 |   0.00111 |    69,164 | RCLG::R-SETCAR
    675,216 |        18 |     0.020 |   0.00111 |    37,512 | RCLG::R-CDR
  1,350,432 |        36 |     0.020 |   0.00056 |    37,512 | RCLG::R-GET-LISTSXP
  2,701,136 |        36 |     0.020 |   0.00056 |    75,032 | RCLG::R-GET-U

and at the Alien level:

  Consed    |   Calls   |    Secs   | Sec/Call  | Bytes/C.  | Name:
-----------------------------------------------------------------------
  2,350,304 |       120 |     0.030 |   0.00025 |    19,586 | ALIEN::EXTRACT-ALIEN-VALUE
  2,402,528 |       135 |     0.030 |   0.00022 |    17,797 | ALIEN::NATURALIZE


(time (store *a* (convert-to-r 179))), conses almost nothing, but
converting back is wicked expensive.

We focus on the fact that a call to sexptype is very expensive:
(rclg::sexptype *a*) -> 111,968 bytes consed

(defun sexptype (robj)
  "Gets the sexptype of an robj.  WARNING: ASSUMES THAT THE TYPE
IS STORED IN THE LOW ORDER 5 BITS OF THE SXPINFO-STRUCT, AND THAT
IT CAN BE EXTRACTED VIA A 'mod 32' OPERATION!  MAY NOT BE PORTABLE."
  (let ((info (get-slot-value (get-slot-value robj sexp 'sxpinfo)
			      sxpinfo-struct 'data)))
    (mod info 32)))

Within sexptype, 

(macroexpand-1 '(uffi::get-slot-value robj sexp 'sxpinfo))
(ALIEN:SLOT ROBJ 'SXPINFO)


(alien:slot *a* 'rclg::sxpinfo) -> 75,008 bytes consed

*a* is an alien-pointer-type, so we first deref it.
(store *ap* (deref *a*)) -> ~37,000 bytes
(slot *ap* 'rclg::sxpinfo) -> ~37,000 bytes

Casting seems not to work, and seems to need naturalize, which
I think is expensive.

Things that may be useful and do work:
(alien:alien-value-type obj) gives the alien type, does not cons.
(alien::alien-pointer-type-p type) does not cons, needs an alien value type.
(alien::deref-guts obj '(0)) gives the target type and the offset.

(alien::%sap-alien (alien:alien-sap *a*) *advt*)) can basically "deref"
the pointer without consing.

A partial improvement:


(defun my-sexptype (robj)
  (let ((info (alien:slot (alien:slot (deref-free robj) 'rclg::sxpinfo)
			  'rclg::data)))
     (mod info 32)))


Here we are derefing and "casting" the pointer by hand, and we save
about 1/3 the memory.

alien::alien-record-field-offset is in bits.

alien::alien-slot-or-lose gives us an alien-value-type and an offset.  It's cheap.
The pain is when we then call (inside slot) extract-alien-value in slot:
	 (extract-alien-value (alien-value-sap alien)
			      (alien-record-field-offset field)
			      (alien-record-field-type field)))))))

(defun extract-alien-value (sap offset type)
  (declare (type system-area-pointer sap)
	   (type unsigned-byte offset)
	   (type alien-type type))
  (funcall (coerce (compute-extract-lambda type) 'function)
	   sap offset type))

(LAMBDA (ALIEN::SAP ALIEN::OFFSET IGNORE)
  (DECLARE (TYPE SYSTEM:SYSTEM-AREA-POINTER ALIEN::SAP)
   (TYPE UNSIGNED-BYTE ALIEN::OFFSET) (IGNORE IGNORE))
  (ALIEN::NATURALIZE
   (SYSTEM:SAP-REF-32 ALIEN::SAP (/ ALIEN::OFFSET X86:BYTE-BITS))
   '#<ALIEN::ALIEN-INTEGER-TYPE (ALIEN:UNSIGNED 32)>))
